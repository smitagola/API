-- Create users table
CREATE TABLE users (
    id SERIAL PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create products table
CREATE TABLE products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    description TEXT,
    price NUMERIC(10, 2) NOT NULL,
    stock_quantity INT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create orders table
CREATE TABLE orders (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    total_amount NUMERIC(10, 2) NOT NULL,
    status VARCHAR(50) DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create order_items table
CREATE TABLE order_items (
    id SERIAL PRIMARY KEY,
    order_id INT REFERENCES orders(id),
    product_id INT REFERENCES products(id),
    quantity INT NOT NULL,
    item_price NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create cart table
CREATE TABLE cart (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES users(id),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create cart_items table
CREATE TABLE cart_items (
    id SERIAL PRIMARY KEY,
    cart_id INT REFERENCES cart(id),
    product_id INT REFERENCES products(id),
    quantity INT NOT NULL,
    added_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Insert sample users
INSERT INTO users (username, email, password) VALUES 
('john_doe', 'john@example.com', 'hashed_password_1'),
('jane_smith', 'jane@example.com', 'hashed_password_2');

-- Insert sample products
INSERT INTO products (name, description, price, stock_quantity) VALUES 
('Laptop', 'A high-performance laptop', 1000.00, 10),
('Smartphone', 'A latest model smartphone', 700.00, 20),
('Headphones', 'Noise-cancelling headphones', 150.00, 50),
('Book', 'A bestselling novel', 20.00, 100);

-- Insert sample orders
INSERT INTO orders (user_id, total_amount, status) VALUES 
(1, 1200.00, 'completed'),
(2, 150.00, 'completed');

-- Insert sample order items
INSERT INTO order_items (order_id, product_id, quantity, item_price) VALUES 
(1, 1, 1, 1000.00),
(1, 3, 2, 100.00),
(2, 3, 1, 150.00);

-- Insert sample cart
INSERT INTO cart (user_id) VALUES 
(1),
(2);

-- Insert sample cart items
INSERT INTO cart_items (cart_id, product_id, quantity) VALUES 
(1, 2, 1),
(2, 4, 3);



SELECT 
    u.username,
    p.name AS product_name,
    SUM(oi.quantity) AS total_quantity,
    SUM(oi.quantity * oi.item_price) AS total_value
FROM 
    users u
JOIN 
    orders o ON u.id = o.user_id
JOIN 
    order_items oi ON o.id = oi.order_id
JOIN 
    products p ON oi.product_id = p.id
GROUP BY 
    u.username, p.name;


SELECT 
    DATE_TRUNC('week', o.created_at) AS week_start,
    COUNT(*) AS total_orders,
    SUM(o.total_amount) AS total_revenue
FROM 
    orders o
WHERE 
    o.created_at >= '2024-01-01' AND o.created_at < '2024-04-01'
GROUP BY 
    week_start
ORDER BY 
    week_start;

SELECT 
    p.name AS product_name,
